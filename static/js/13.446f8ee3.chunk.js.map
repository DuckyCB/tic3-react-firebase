{"version":3,"sources":["services/firebase.js","pages/SignUp.js"],"names":["signUp","email","password","firstName","lastName","username","avatar","a","Error","auth","getAuth","validateUsername","createUserWithEmailAndPassword","userCredential","saveUserInfo","user","uid","userId","setDoc","doc","db","postsCount","subscriptions","q","query","collection","where","getDocs","userResults","docs","map","data","length","SignUp","history","useHistory","useContext","FirebaseContext","firebase","useState","setUsername","setFirstName","setLastName","emailAddress","setEmailAddress","emailError","setEmailError","setPassword","passwordError","setPasswordError","usernameError","setUsernameError","setAvatar","useForm","register","setError","handleSubmit","errors","formState","clearErrors","usernameRef","useRef","rest","onChange","handleSignup","event","preventDefault","hasWhiteSpace","type","message","hasAt","loginUser","push","ROUTES","code","console","error","includes","str","indexOf","useEffect","document","title","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","Typography","variant","onSubmit","mt","Grid","container","spacing","item","xs","sm","TextField","autoComplete","name","required","fullWidth","id","label","autoFocus","value","target","ref","helperText","Button","mb","justifyContent","RouterLink","to","color"],"mappings":"sSAsCaA,EAAM,uCAAG,WAAOC,EAAOC,EAAUC,EAAWC,EAAUC,EAAUC,GAAvD,iBAAAC,EAAA,yDAEbN,GAAUC,GAAaC,GAAcC,GAAaC,EAFrC,sBAGR,IAAIG,MAAM,eAHF,cAMZC,EAAOC,cANK,kBASRC,EAAiBN,GATT,uBAUeO,YAA+BH,EAAMR,EAAOC,GAV3D,cAURW,EAVQ,iBAWRC,EAAaD,EAAeE,KAAKC,IAAKf,EAAOE,EAAWC,EAAUC,EAAUC,GAXpE,iCAYPO,EAAeE,MAZR,uGAAH,gEAkBbD,EAAY,uCAAG,WAAOG,EAAQhB,EAAOE,EAAWC,EAAUC,EAAUC,GAArD,SAAAC,EAAA,sEAEXW,YAAOC,YAAIC,KAAI,QAASH,GAAS,CACnChB,QACAE,YACAC,WACAC,WACAgB,WAAY,EACZC,cAAe,GACfhB,WATa,2CAAH,gEAaZK,EAAgB,uCAAG,WAAON,GAAP,iBAAAE,EAAA,6DACfgB,EAAIC,YAAMC,YAAWL,KAAI,SAAUM,YAAM,WAAY,KAAMrB,IAD5C,SAEKsB,YAAQJ,GAFb,UAEfK,EAFe,SAGPA,EAAYC,KAAKC,KAAI,SAACf,GAAD,OAAUA,EAAKgB,QACxCC,QAAU,GAJC,sBAKX,IAAIxB,MAAM,2BALC,2CAAH,sD,+GCrDP,SAASyB,IACvB,IAAMC,EAAUC,cAGhB,GAFmBC,qBAAWC,KAAvBC,SAEyBC,mBAAS,KAAzC,mBAAOlC,EAAP,KAAiBmC,EAAjB,KAEA,EAAkCD,mBAAS,IAA3C,mBAAOpC,EAAP,KAAkBsC,EAAlB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOnC,EAAP,KAAiBsC,EAAjB,KAEA,EAAwCH,mBAAS,IAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KACA,EAAoCL,oBAAS,GAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAAgCP,mBAAS,IAAzC,mBAAOrC,EAAP,KAAiB6C,EAAjB,KACA,EAA0CR,oBAAS,GAAnD,mBAAOS,EAAP,KAAsBC,EAAtB,KACA,EAA0CV,oBAAS,GAAnD,mBAAOW,GAAP,KAAsBC,GAAtB,KACA,GAA4BZ,mBAAS,IAArC,qBAAOjC,GAAP,MAAe8C,GAAf,MAIA,GAAiFC,cAAzEC,GAAR,GAAQA,SAAwBC,IAAhC,GAAkBC,aAAlB,GAAgCD,UAAuBE,GAAvD,GAA0CC,UAAaD,OAAUE,GAAjE,GAAiEA,YAE3DC,GAAcC,iBAAO,MAE3B,GAA6BP,GAAS,YAAjBQ,IAArB,GAAQC,SAAR,mBAEMC,GAAY,uCAAG,WAAOC,GAAP,eAAA1D,EAAA,yDACpB0D,EAAMC,iBADc,WAIfC,GAAc9D,IAAaA,EAAS2B,OAAS,GAJ9B,uBAKlBmB,IAAiB,GACjBI,GAAS,WAAY,CACpBa,KAAM,SACNC,QAAS,kEARQ,0BAYlBlB,IAAiB,GAZC,UAedmB,GAAM3B,GAfQ,wBAgBlBG,GAAc,GACdS,GAAS,WAAY,CACpBa,KAAM,SACNC,QAAS,kBAnBQ,2BAuBlBvB,GAAc,GAvBI,aAyBf5C,EAAS8B,OAAS,GAzBH,wBA0BNiB,GAAiB,GACjBM,GAAS,WAAY,CACjBa,KAAM,SACNC,QAAS,2CA7BP,2BAiClBpB,GAAiB,GAjCC,yBAoCAjD,EAAO2C,EAAczC,EAAUC,EAAWC,EAAUC,EAAUC,IApC9D,gCAqCbiE,YAAU5B,EAAczC,GArCX,QAsCnBgC,EAAQsC,KAAKC,KAtCM,kDAuCVJ,EAvCU,KAuCVA,QAvCU,KAuCDK,KACF,4BAAZL,IACHlB,IAAiB,GACjBI,GAAS,WAAY,CACpBa,KAAM,SACNC,QAAS,6BAIXM,QAAQC,MAAMP,GAhDK,0DAAH,sDAmDZC,GAAQ,SAACrE,GACR,OAAOA,EAAM4E,SAAS,MAEvBV,GAAgB,SAAAW,GAAG,OAAIA,EAAIC,QAAQ,MAAQ,GAOjD,OALAC,qBAAU,WACTC,SAASC,MAAQ,mBACf,IAIF,mCACC,eAACC,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,UACC,cAACC,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CACCC,GAAI,CACHC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,UALd,UAQC,cAACC,EAAA,EAAD,CAAQL,GAAI,CAAEM,EAAG,EAAGC,QAAS,aAG7B,cAACC,EAAA,EAAD,CAAYZ,UAAU,KAAKa,QAAQ,KAAnC,qBAGA,eAACV,EAAA,EAAD,CAAKH,UAAU,OAAQc,SAAUlC,GAAcwB,GAAI,CAAEW,GAAI,GAAzD,UACC,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACC,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACC,cAACC,EAAA,EAAD,CAAWC,aAAa,aAAaC,KAAK,YAAYC,UAAQ,EAACC,WAAS,EAACC,GAAG,YACvEC,MAAM,aAAaC,WAAS,EAACC,MAAO/G,EACpC4D,SAAU,gBAAEoD,EAAF,EAAEA,OAAF,OAAc1E,EAAa0E,EAAOD,YAGlD,cAACd,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACC,cAACC,EAAA,EAAD,CAAWG,UAAQ,EAACC,WAAS,EAACC,GAAG,WAAWC,MAAM,YAAYJ,KAAK,WAC9DD,aAAa,cAAcO,MAAO9G,EAClC2D,SAAU,gBAAEoD,EAAF,EAAEA,OAAF,OAAczE,EAAYyE,EAAOD,YAGjD,cAACd,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACC,cAACE,EAAA,EAAD,aAAWG,UAAQ,EAACO,IAAKxD,GAAagB,MAAO1B,GAAemE,WAAY5D,GAAOpD,UAAYoD,GAAOpD,SAASgE,QAASyC,WAAS,EAACC,GAAG,WAAWC,MAAM,WAAWE,MAAO7G,EAC/J0D,SAAU,YAAe,IAAboD,EAAY,EAAZA,OACXxD,GAAY,YACZR,IAAiB,GACjBX,EAAY2E,EAAOD,SAEhBpD,OAGV,cAACsC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACC,cAACE,EAAA,EAAD,CAAWG,UAAQ,EAACC,WAAS,EAACC,GAAG,QAAQC,MAAM,gBAAgBJ,KAAK,QAC/DD,aAAa,QAAQO,MAAOvE,EAAciC,MAAO/B,EAAYwE,WAAYxE,EAAa,gBAAkB,GACxGkB,SAAU,gBAAEoD,EAAF,EAAEA,OAAF,OAAcvE,EAAgBuE,EAAOD,YAGrD,cAACd,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACC,cAACE,EAAA,EAAD,CAAWG,UAAQ,EAACC,WAAS,EAACF,KAAK,WAAWI,MAAM,WAAW5C,KAAK,WAC/D2C,GAAG,WAAWJ,aAAa,eAAeO,MAAOhH,EAAU0E,MAAO5B,EAAeqE,WAAYrE,GAAiBS,GAAOvD,SAASmE,QAC9HN,SAAU,gBAAEoD,EAAF,EAAEA,OAAF,OAAcpE,EAAYoE,EAAOD,YAGjD,cAACd,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACC,cAACE,EAAA,EAAD,CAAWI,WAAS,EAACF,KAAK,SAASI,MAAM,cAAc5C,KAAK,SACvD2C,GAAG,SAASG,MAAO5G,GACnByD,SAAU,gBAAEoD,EAAF,EAAEA,OAAF,OAAc/D,GAAU+D,EAAOD,eAIhD,cAACI,EAAA,EAAD,CAAQlD,KAAK,SAAS0C,WAAS,EAACb,QAAQ,YAAYT,GAAI,CAAEW,GAAI,EAAGoB,GAAI,GAArE,qBAGA,cAACnB,EAAA,EAAD,CAAMC,WAAS,EAACmB,eAAe,WAA/B,SACC,cAACpB,EAAA,EAAD,CAAMG,MAAI,EAAV,SACC,cAACP,EAAA,EAAD,CAAYZ,UAAWqC,IAAYC,GAAIjD,IAAckD,MAAM,UAA3D","file":"static/js/13.446f8ee3.chunk.js","sourcesContent":["import { createUserWithEmailAndPassword, getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\r\nimport { collection, getDocs, query, where, setDoc, doc } from \"firebase/firestore\";\r\nimport { db } from \"../lib/firebase\";\r\n\r\nexport const login = async (email, password) => {\r\n    // const result = await firebase.firestore.collection('users').where('username', '==', username)\r\n\r\n\r\n    // const q = query(collection(db, 'users'), where('username', '==', username));\r\n    // console.log('Query: ', q)\r\n    //\r\n    // console.log('Username: ', q.username)\r\n    //\r\n    // let exists = await q.docs.map((user) => user.data().length > 0);\r\n    //\r\n    // console.log(exists);\r\n\r\n    const auth = getAuth();\r\n\r\n    try {\r\n        const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n        return userCredential.user;\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n\r\n    // let result;\r\n    // try {\r\n    //     const emailQuery = query(collection(db, 'users'), where('emailAddress', '==', loginName), where('password', '==', password));\r\n    //     const usernameQuery = query(collection(db, 'users'), where('username', '==', loginName), where('password', '==', password));\r\n    //     // let hello = await result.docs.map((user) => user.data().length > 0);\r\n    //     const [emailResult, usernameResult] = await Promise.all([getDocs(emailQuery), getDocs(usernameQuery)]);\r\n    //     result = [...emailResult.docs, ...usernameResult.docs];\r\n    // } catch (e) {\r\n    //     console.error(e.message);\r\n    // }\r\n}\r\n\r\nexport const signUp = async (email, password, firstName, lastName, username, avatar) => {\r\n\r\n    if (!email || !password || !firstName || !lastName || !username) {\r\n        throw new Error('empty field');\r\n    }\r\n\r\n    const auth = getAuth();\r\n\r\n    try {\r\n        await validateUsername(username);\r\n        const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n        await saveUserInfo(userCredential.user.uid, email, firstName, lastName, username, avatar);\r\n        return userCredential.user;\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n};\r\n\r\nconst saveUserInfo = async (userId, email, firstName, lastName, username, avatar) => {\r\n\r\n    await setDoc(doc(db, 'users', userId), {\r\n        email,\r\n        firstName,\r\n        lastName,\r\n        username,\r\n        postsCount: 0,\r\n        subscriptions: [],\r\n        avatar\r\n    });\r\n}\r\n\r\nconst validateUsername = async (username) => {\r\n    const q = query(collection(db, 'users'), where('username', '==', username));\r\n    const userResults = await getDocs(q);\r\n    const users = userResults.docs.map((user) => user.data);\r\n    if (users.length >= 1) {\r\n        throw new Error('username already exists');\r\n    }\r\n}\r\n","import {Link as RouterLink, Link, useHistory} from \"react-router-dom\";\r\nimport {useContext, useEffect, useState, useRef} from \"react\";\r\nimport FirebaseContext from \"../context/firebase\";\r\nimport * as ROUTES from \"../constants/routes\";\r\nimport {signUp} from \"../services/firebase\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {Container, CssBaseline, TextField} from \"@mui/material\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { loginUser } from \"../utils/userUtils\";\r\n\r\n//TODO : avatar\r\n\r\nexport default function SignUp() {\r\n\tconst history = useHistory();\r\n\tconst {firebase} = useContext(FirebaseContext)\r\n\r\n\tconst [username, setUsername] = useState('');\r\n\t// const [fullName, setFullName] = useState('');\r\n\tconst [firstName, setFirstName] = useState('');\r\n\tconst [lastName, setLastName] = useState('');\r\n\r\n\tconst [emailAddress, setEmailAddress] = useState('');\r\n\tconst [emailError, setEmailError] = useState(false);\r\n\tconst [password, setPassword] = useState('');\r\n\tconst [passwordError, setPasswordError] = useState(false);\r\n\tconst [usernameError, setUsernameError] = useState(false);\r\n\tconst [avatar, setAvatar] = useState('');\r\n\r\n\r\n\t// const [error, setError] = useState('');\r\n\tconst { register, handleSubmit, setError, formState: { errors }, clearErrors } = useForm();\r\n\r\n\tconst usernameRef = useRef(null);\r\n\tconst isInvalid = password === '' || emailAddress === '';\r\n\tconst { onChange, ...rest} = register('username');\r\n\r\n\tconst handleSignup = async (event) => {\r\n\t\tevent.preventDefault();\r\n\r\n\t\ttry {\r\n\t\t\tif (hasWhiteSpace(username) || username.length < 4) {\r\n\t\t\t\tsetUsernameError(true);\r\n\t\t\t\tsetError('username', {\r\n\t\t\t\t\ttype: 'manual',\r\n\t\t\t\t\tmessage: 'username can\\'t have white spaces or shorter than 4 characters'\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t} else {\r\n\t\t\t\tsetUsernameError(false);\r\n\t\t\t}\r\n\r\n\t\t\tif (!hasAt(emailAddress)) {\r\n\t\t\t\tsetEmailError(true);\r\n\t\t\t\tsetError('password', {\r\n\t\t\t\t\ttype: 'manual',\r\n\t\t\t\t\tmessage: 'Invalid email'\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t} else {\r\n\t\t\t\tsetEmailError(false);\r\n\t\t\t}\r\n\t\t\tif (password.length < 6) {\r\n                setPasswordError(true);\r\n                setError('password', {\r\n                    type: 'manual',\r\n                    message: 'Password must be at least 6 characters'\r\n                });\r\n                return;\r\n            } else {\r\n\t\t\t\tsetPasswordError(false);\r\n\t\t\t}\r\n\r\n\t\t\tconst user = await signUp(emailAddress, password, firstName, lastName, username, avatar);\r\n\t\t\tawait loginUser(emailAddress, password);\r\n\t\t\thistory.push(ROUTES.DASHBOARD);\r\n\t\t} catch ({message, code}) {\r\n\t\t\tif (message === 'username already exists') {\r\n\t\t\t\tsetUsernameError(true);\r\n\t\t\t\tsetError('username', {\r\n\t\t\t\t\ttype: 'manual',\r\n\t\t\t\t\tmessage: 'username already exists'\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t// setError(code);\r\n\t\t\tconsole.error(message);\r\n\t\t}\r\n\t};\r\n\tconst hasAt = (email) => {\r\n        return email.includes('@');\r\n    };\r\n\tconst hasWhiteSpace = str => str.indexOf(' ') >= 0;\r\n\r\n\tuseEffect(() => {\r\n\t\tdocument.title = 'Kinchoo signup';\r\n\t}, []);\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Container component=\"main\" maxWidth=\"xs\">\r\n\t\t\t\t<CssBaseline />\r\n\t\t\t\t<Box\r\n\t\t\t\t\tsx={{\r\n\t\t\t\t\t\tmarginTop: 8,\r\n\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\tflexDirection: 'column',\r\n\t\t\t\t\t\talignItems: 'center',\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Avatar sx={{ m: 1, bgcolor: '#ef6c00' }}>\r\n\t\t\t\t\t\t{/*<LockOutlinedIcon />*/}\r\n\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t<Typography component=\"h1\" variant=\"h5\">\r\n\t\t\t\t\t\tSign up\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Box component=\"form\"  onSubmit={handleSignup} sx={{ mt: 3 }}>\r\n\t\t\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t\t\t<TextField autoComplete=\"given-name\" name=\"firstName\" required fullWidth id=\"firstName\"\r\n\t\t\t\t\t\t\t\t\t\t   label=\"First Name\" autoFocus value={firstName}\r\n\t\t\t\t\t\t\t\t\t\t   onChange={({target}) => setFirstName(target.value)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t\t\t<TextField required fullWidth id=\"lastName\" label=\"Last Name\" name=\"lastName\"\r\n\t\t\t\t\t\t\t\t\t\t   autoComplete=\"family-name\" value={lastName}\r\n\t\t\t\t\t\t\t\t\t\t   onChange={({target}) => setLastName(target.value)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<TextField required ref={usernameRef} error={usernameError} helperText={errors.username && errors.username.message} fullWidth id=\"username\" label=\"Username\" value={username}\r\n\t\t\t\t\t\t\t\t\t\t   onChange={({target}) => {\r\n\t\t\t\t\t\t\t\t\t\t\t   clearErrors('username');\r\n\t\t\t\t\t\t\t\t\t\t\t   setUsernameError(false);\r\n\t\t\t\t\t\t\t\t\t\t\t   setUsername(target.value);\r\n\t\t\t\t\t\t\t\t\t\t   }}\r\n\t\t\t\t\t\t\t\t\t\t   {...rest}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<TextField required fullWidth id=\"email\" label=\"Email Address\" name=\"email\"\r\n\t\t\t\t\t\t\t\t\t\t   autoComplete=\"email\" value={emailAddress} error={emailError} helperText={emailError ? \"Invalid email\" : \"\"}\r\n\t\t\t\t\t\t\t\t\t\t   onChange={({target}) => setEmailAddress(target.value)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<TextField required fullWidth name=\"password\" label=\"Password\" type=\"password\"\r\n\t\t\t\t\t\t\t\t\t\t   id=\"password\" autoComplete=\"new-password\" value={password} error={passwordError} helperText={passwordError && errors.password.message}\r\n\t\t\t\t\t\t\t\t\t\t   onChange={({target}) => setPassword(target.value)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<TextField fullWidth name=\"avatar\" label=\"Avatar link\" type=\"avatar\"\r\n\t\t\t\t\t\t\t\t\t\t   id=\"avatar\" value={avatar}\r\n\t\t\t\t\t\t\t\t\t\t   onChange={({target}) => setAvatar(target.value)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Button type=\"submit\" fullWidth variant=\"contained\" sx={{ mt: 3, mb: 2 }}>\r\n\t\t\t\t\t\t\tSign Up\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Grid container justifyContent=\"flex-end\">\r\n\t\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t\t<Typography component={RouterLink} to={ROUTES.LOGIN} color=\"inherit\">\r\n\t\t\t\t\t\t\t\t\tAlready have an account? Sign in\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Box>\r\n\t\t\t</Container>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\n"],"sourceRoot":""}