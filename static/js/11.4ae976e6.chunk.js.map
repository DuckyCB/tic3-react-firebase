{"version":3,"sources":["components/Comments.js","pages/FullPost.js","utils/date-utils.js","components/VoteButtons.js","components/Post.js"],"names":["Comment","content","postedBy","createdAt","Card","variant","sx","width","CardContent","Typography","color","component","RouterLink","to","textDecoration","Comments","post","useState","comments","setComments","newComment","setNewComment","userData","setUserData","useAuthState","auth","user","loading","a","addDoc","collection","db","id","Timestamp","fromDate","Date","downVotes","upVotes","username","useEffect","q","query","onSnapshot","querySnapshot","_comments","forEach","doc","push","data","err","console","error","fetchData","fetchUserData","getComments","Paper","marginBottom","Stack","spacing","justifyContent","alignItems","paddingTop","paddingBottom","margin","map","comment","formatMinutes","Box","Grid","container","item","xs","TextField","fullWidth","label","placeholder","multiline","value","onChange","target","Button","height","onClick","FullPost","undefined","setPost","postid","useParams","docRef","snapshot","fetchPost","document","title","Post","fullRender","Skeleton","animation","formatDay","dateFS","dateJS","toDate","month","getUTCMonth","getUTCDate","getUTCFullYear","day","year","getUTCHours","getUTCMinutes","require","VoteButtons","upVotesCount","downVotesCount","upvoteList","usersUpvote","downvoteList","usersDownvote","handleClick","type","date","includes","filter","batch","writeBatch","postRef","update","updatedAt","commit","direction","IconButton","disabled","style","p","Content","imgURL","CardMedia","alt","image","display","gutterBottom","padding","maxHeight","overflow","align","CardHeader","avatar","Avatar","bgcolor","red","src","subKinchoo","Link","subname","subheader","CardActionArea","CardActions","defaultProps"],"mappings":"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","file":"static/js/11.4ae976e6.chunk.js","sourcesContent":["import {Card, CardContent, Paper, Stack, TextField, Typography} from \"@mui/material\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport Box from \"@mui/material/Box\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {addDoc, collection, onSnapshot, query, Timestamp} from \"firebase/firestore\";\r\nimport {auth, db} from \"../lib/firebase\";\r\nimport {formatMinutes} from \"../utils/date-utils\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\r\nimport {useAuthState} from \"react-firebase-hooks/auth\";\r\nimport {fetchUserData} from \"../utils/userUtils\";\r\n\r\n\r\nfunction Comment({content, postedBy, createdAt}) {\r\n\r\n    return (\r\n        <Card variant=\"outlined\" sx={{ width: '100%' }}>\r\n            <CardContent>\r\n                <Typography variant=\"body1\" color=\"text.primary\">\r\n                    {content}\r\n                </Typography>\r\n                <Typography variant=\"caption\" color=\"text.secondary\" component={RouterLink}\r\n                            to={`/u/${postedBy}`} sx={{ textDecoration: 'none', color: 'text.primary' }}>\r\n                    {postedBy} - {createdAt}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default function Comments({post}) {\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState([]);\r\n    const [userData, setUserData] = useState(null);\r\n    const [user, loading, error] = useAuthState(auth);\r\n\r\n\r\n    useEffect(() => {\r\n        async function getComments() {\r\n            try {\r\n                const q = query(collection(db, 'posts', post.id, 'comments'));\r\n                onSnapshot(q, (querySnapshot) => {\r\n                    const _comments = [];\r\n                    querySnapshot.forEach((doc) => {\r\n                        _comments.push({id: doc.id, ...doc.data()});\r\n                    });\r\n                    setComments(_comments);\r\n                });\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n\r\n\r\n        const fetchData = async () => {\r\n            if (loading || !user) return;\r\n            setUserData(await fetchUserData(user));\r\n        }\r\n\r\n        fetchData();\r\n        getComments();\r\n\r\n    }, [user, loading]);\r\n\r\n    async function handleNewComment() {\r\n        const docRef = await addDoc(collection(db, 'posts', post.id, 'comments'), {\r\n            content: newComment,\r\n            createdAt: Timestamp.fromDate(new Date()),\r\n            downVotes: 0,\r\n            upVotes: 0,\r\n            postedBy: userData.username\r\n        });\r\n        setNewComment('');\r\n    };\r\n\r\n    return (\r\n        <Paper sx={{ width: 6/10, marginBottom: 5 }}>\r\n            <Stack spacing={1} justifyContent=\"center\" alignItems=\"center\"\r\n                   sx={{ width: 9/10, paddingTop: 4, paddingBottom: 4, margin: 'auto' }}>\r\n                {comments.map((comment) =>\r\n                    <Comment content={comment.content} postedBy={comment.postedBy} createdAt={formatMinutes(comment.createdAt)}/>\r\n                )}\r\n                <Box sx={{width: '100%'}}>\r\n                    <Grid container component=\"form\" sx={{paddingBottom: 4}} spacing={1}>\r\n                        <Grid item xs={10}>\r\n                            <TextField fullWidth id=\"outlined-textarea\" label=\"New comment\" placeholder=\"Excelent post!\" multiline\r\n                                       value={newComment}\r\n                                       onChange={({target}) => setNewComment(target.value)}/>\r\n                        </Grid>\r\n                        <Grid item xs={2} container>\r\n                            <Button variant=\"contained\" sx={{height: '100%', width: '100%'}} onClick={handleNewComment}>+</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Stack>\r\n        </Paper>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport Post from \"../components/Post\";\r\nimport Comments from \"../components/Comments\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {doc, onSnapshot} from \"firebase/firestore\";\r\nimport {db} from \"../lib/firebase\";\r\nimport {Skeleton, Stack} from \"@mui/material\";\r\n\r\nexport default function FullPost() {\r\n\r\n    const [post, setPost] = useState(undefined);\r\n    const { postid } = useParams();\r\n\r\n    useEffect(() => {\r\n\r\n        async function fetchPost() {\r\n            try {\r\n                const docRef = doc(db, 'posts', `${postid}`);\r\n                onSnapshot(docRef, (snapshot) => {\r\n                    setPost({id: snapshot.id, ...snapshot.data()});\r\n                });\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        fetchPost()\r\n\r\n    }, []);\r\n\r\n    document.title = post ? `p/${post.title}` : 'p/';\r\n\r\n    return (\r\n        <>\r\n            {/*<Navbar />*/}\r\n            <Stack spacing={4} justifyContent=\"center\" alignItems=\"center\">\r\n                {post !== undefined ?\r\n                    <Post post={post} fullRender=\"true\" key={post.id}/>\r\n                    :\r\n                    <Skeleton animation=\"wave\" variant=\"rectangular\" width={ 800 } height={ 700 } />\r\n                }\r\n                {post !== undefined ?\r\n                    <Comments post={post}/>\r\n                    :\r\n                    <Skeleton animation=\"wave\" variant=\"rectangular\" width={ 800 } height={ 150 } />\r\n                }\r\n            </Stack>\r\n        </>\r\n    )\r\n}\r\n","\r\nexport function formatDay(dateFS){\r\n\tconst dateJS = dateFS.toDate();\r\n\tconst month = dateJS.getUTCMonth() + 1; //months from 1-12\r\n\tconst day = dateJS.getUTCDate();\r\n\tconst year = dateJS.getUTCFullYear();\r\n\treturn day + \"/\" + month + \"/\" + year;\r\n}\r\n\r\nexport function formatMinutes(dateFS){\r\n\tconst dateJS = dateFS.toDate();\r\n\tconst month = dateJS.getUTCMonth() + 1; //months from 1-12\r\n\tconst day = dateJS.getUTCDate();\r\n\tconst year = dateJS.getUTCFullYear();\r\n\tconst hour = dateJS.getUTCHours();\r\n\tconst minutes = dateJS.getUTCMinutes() > 9 ? dateJS.getUTCMinutes() : \"0\" + dateJS.getUTCMinutes();\r\n\treturn ((24 + hour - 3) % 24) + ':' + minutes + ' ' + day + \"/\" + month + \"/\" + year;\r\n}\r\n","import ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\r\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {Stack, Typography} from \"@mui/material\";\r\nimport {doc, Timestamp, writeBatch} from \"firebase/firestore\";\r\nimport {fetchUserData} from \"../utils/userUtils\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {useAuthState} from \"react-firebase-hooks/auth\";\r\nimport {auth} from \"../lib/firebase\";\r\nconst {db} = require(\"../lib/firebase\");\r\n\r\n\r\n\r\nexport default function VoteButtons ({ post }){\r\n    const [userData, setUserData] = useState(null);\r\n    const [user, loading, error] = useAuthState(auth);\r\n\r\n    let upVotesCount = post.upVotesCount;\r\n    let downVotesCount = post.downVotesCount;\r\n    let upvoteList = post.usersUpvote\r\n    let downvoteList = post.usersDownvote\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (loading || !user) return;\r\n            setUserData(await fetchUserData(user));\r\n        }\r\n        fetchData();\r\n    }, [user, loading]);\r\n\r\n\r\n\r\n    const handleClick = async (type) => {\r\n        // Do calculation to save the vote.\r\n        upVotesCount = post.upVotesCount;\r\n        downVotesCount = post.downVotesCount;\r\n        upvoteList = post.usersUpvote\r\n        downvoteList = post.usersDownvote\r\n        const date = new Date();\r\n\r\n        if (type === \"upvote\") {\r\n            if (downvoteList.includes(userData.id)){\r\n                // remove downvote\r\n                downvoteList = downvoteList.filter(id => id !== userData.id)\r\n                downVotesCount--\r\n            } else {\r\n                upVotesCount++;\r\n                upvoteList.push(userData.id);\r\n            }\r\n        } else {\r\n            if (upvoteList.includes(userData.id)){\r\n                // remove upvote\r\n                upvoteList = upvoteList.filter(id => id !== userData.id)\r\n                upVotesCount--\r\n            } else {\r\n                downVotesCount++;\r\n                downvoteList.push(userData.id);\r\n            }\r\n        }\r\n        const batch = writeBatch(db);\r\n        const postRef = doc(db, \"posts\", post.id);\r\n        batch.update(postRef, {\r\n            upVotesCount: upVotesCount,\r\n            downVotesCount: downVotesCount,\r\n            usersUpvote: upvoteList,\r\n            usersDownvote: downvoteList,\r\n            updatedAt: Timestamp.fromDate(date)\r\n        });\r\n        await batch.commit()\r\n    };\r\n\r\nreturn (\r\n    <>\r\n        <Stack direction=\"row\">\r\n            <IconButton\r\n                color={userData ? (post.usersDownvote.includes(userData.id) ? \"disabled\" : \"upvote\"): \"disabled\"}\r\n                disabled={!userData || post.usersUpvote.includes(userData.id)}\r\n                style={userData ? (post.usersUpvote.includes(userData.id) ? {color: '#FF8b60'}: {}) : {}}\r\n                variant=\"outlined\"\r\n                onClick={() => handleClick(\"upvote\")}\r\n            >\r\n                <ArrowUpwardIcon/>\r\n            </IconButton>\r\n            <IconButton\r\n                color={userData ? (post.usersUpvote.includes(userData.id) ? \"disabled\" : \"downvote\"): \"disabled\"}\r\n                disabled={!userData || post.usersDownvote.includes(userData.id)}\r\n                style={userData ? (post.usersDownvote.includes(userData.id) ? {color: '#9494FF'}: {}) : {}}\r\n                variant=\"outlined\"\r\n                onClick={() => handleClick(\"downvote\")}\r\n            >\r\n                <ArrowDownwardIcon/>\r\n            </IconButton>\r\n            <Typography p={1}>\r\n                {post.upVotesCount - post.downVotesCount}\r\n            </Typography>\r\n        </Stack>\r\n    </>\r\n)}\r\n\r\n","import React from \"react\";\r\nimport {Card, CardActionArea, CardActions, CardContent, CardHeader, CardMedia, Link, Typography} from \"@mui/material\";\r\nimport VoteButtons from \"./VoteButtons\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport {red} from \"@mui/material/colors\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport {formatDay} from \"../utils/date-utils\";\r\n\r\nfunction Content({post, fullRender}) {\r\n\r\n    let img;\r\n    if (post.imgURL) {\r\n        img = <CardMedia component=\"img\" alt=\"Image not fetched\" image={post.imgURL}/>\r\n    }\r\n\r\n    return (\r\n        <CardContent>\r\n            <Typography variant=\"h6\" display=\"block\" gutterBottom>\r\n                {post.title}\r\n            </Typography>\r\n            {post.imgURL ? <CardMedia component=\"img\" alt=\"Image not fetched\" image={post.imgURL}/> : null}\r\n            <Typography sx={fullRender ? {padding: 4} : {padding: 4, maxHeight: 250, overflow: 'hidden', display: (post.imgURL === '' ?\r\n                    'block' : 'none')}} align={\"justify\"} >\r\n                {post.content}\r\n            </Typography>\r\n        </CardContent>\r\n    )\r\n}\r\n\r\nconst Post = ({post, fullRender}) => {\r\n    let user;\r\n    if (post.user) {\r\n        user = `Posted by u/${post.user.username}`\r\n    }\r\n    const date = formatDay(post.createdAt)\r\n\r\n\r\n    const styleUser = {\r\n\r\n    }\r\n   return (\r\n       <Card key={post.id} sx={{ width: 6/10 }}>\r\n           <CardHeader\r\n               avatar={\r\n                   <Avatar sx={{bgcolor: red[500]}} aria-label=\"recipe\" src={post.subKinchoo.avatar}/>\r\n               }\r\n               title={\r\n                   <Link component={RouterLink} to={`/r/${post.subKinchoo.subname}`} sx={{ textDecoration: 'none', color: 'text.primary' }}>\r\n                       r/{post.subKinchoo.subname}\r\n                   </Link>\r\n               }\r\n               subheader={\r\n                   <Link component={RouterLink} to={`/u/${post.user.username}`} sx={{ textDecoration: 'none', color: 'text.secondary' }}>\r\n                       {user}\r\n                   </Link>\r\n               }\r\n           />\r\n           {fullRender ? (\r\n               <Content post={post} fullRender={fullRender}/>\r\n           ) : (\r\n               <CardActionArea component={RouterLink} to={`/p/${post.id}`}>\r\n                   <Content post={post} fullRender={fullRender}/>\r\n               </CardActionArea>\r\n           )}\r\n           <CardActions sx={{justifyContent: 'space-between'}}>\r\n               <VoteButtons post = {post}/>\r\n               <Typography align={\"right\"} >\r\n                   Posted: {date}\r\n               </Typography>\r\n           </CardActions>\r\n       </Card>\r\n   );\r\n};\r\n\r\nPost.defaultProps = {\r\n    fullRender: false\r\n};\r\n\r\nexport default Post;\r\n"],"sourceRoot":""}